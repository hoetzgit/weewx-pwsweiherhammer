#!/usr/bin/python3
# backfill sunshineDur
import argparse
import math
import time
from math import sin,cos,pi,asin
from datetime import datetime
import sys
sys.path.append('/home/weewx/bin')

import weecfg
import weewx
import weewx.engine
from weeutil.weeutil import to_int, to_float, to_bool, timestamp_to_string

#Start:
#01. January 2019 00:00:01
startTimestamp=1546297201
#End:
#GMT: Tuesday, 31. May 2022 00:00:00
endTimestamp=1653947999

parser = argparse.ArgumentParser(
    description="Takes one or more file paths and reports their detected \
                 encodings")
parser.add_argument('config_file',
                    help='WeeWx config file',
                    type=str)
parser.add_argument('--start_time',
                    help='Timestamp in epoch seconds to start backfill from (default: %d)' % (startTimestamp),
                    type=int,
                    default=startTimestamp)
parser.add_argument('--end_time',
                    help='Timestamp in epoch seconds to stop backfill at (default: %d)' % (endTimestamp),
                    type=int,
                    default=endTimestamp)
args = parser.parse_args()

def show_progress(last_time, nrec=None):
    """Utility function to show our progress"""
    if nrec:
        msg = "Records processed: %d; dateTime: %s\r" \
              % (nrec, timestamp_to_string(last_time))
    else:
        msg = "Processed through: %s\r" % timestamp_to_string(last_time)
    print(msg, end='', file=sys.stdout)
    sys.stdout.flush()

def sunshineThreshold(mydatetime, lat, lon):
    utcdate = datetime.utcfromtimestamp(to_int(mydatetime))
    dayofyear = to_int(time.strftime("%j",time.gmtime(to_int(mydatetime))))
    monthofyear = to_int(time.strftime("%m",time.gmtime(to_int(mydatetime))))
    coeff = coeff_monthly.get(monthofyear, 0.79)
    theta = 360 * dayofyear / 365
    equatemps = 0.0172 + 0.4281 * cos((pi / 180) * theta) - 7.3515 * sin(
        (pi / 180) * theta) - 3.3495 * cos(2 * (pi / 180) * theta) - 9.3619 * sin(
        2 * (pi / 180) * theta)
    corrtemps = lon * 4
    declinaison = asin(0.006918 - 0.399912 * cos((pi / 180) * theta) + 0.070257 * sin(
        (pi / 180) * theta) - 0.006758 * cos(2 * (pi / 180) * theta) + 0.000908 * sin(
        2 * (pi / 180) * theta)) * (180 / pi)
    minutesjour = utcdate.hour * 60 + utcdate.minute
    tempsolaire = (minutesjour + corrtemps + equatemps) / 60
    angle_horaire = (tempsolaire - 12) * 15
    hauteur_soleil = asin(sin((pi / 180) * lat) * sin((pi / 180) * declinaison) + cos(
        (pi / 180) * lat) * cos((pi / 180) * declinaison) * cos((pi / 180) * angle_horaire)) * (180 / pi)
    if hauteur_soleil > 3:
        seuil = (0.73 + 0.06 * cos((pi / 180) * 360 * dayofyear / 365)) * 1080 * pow(
            sin((pi / 180) * hauteur_soleil), 1.25) * to_float(coeff)
    else:
        seuil = 0.0
    return seuil

config_path, config_dict = weecfg.read_config(args.config_file, [])
db_binder = weewx.manager.DBBinder(config_dict)

if args.start_time > endTimestamp:
    args.start_time = endTimestamp
if args.end_time > endTimestamp:
    args.end_time = endTimestamp
if args.end_time < args.start_time:
    args.start_time = endTimestamp
    args.end_time = endTimestamp

coeff_monthly = {1: 0.79, 2: 0.79, 3: 0.79, 4: 0.79, 5: 0.79, 6: 0.79, 7: 0.79, 8: 0.79, 9: 0.79, 10: 0.79, 11: 0.79, 12: 0.79}
radiation_min = 20.0
lat = to_float(config_dict['Station'].get('latitude'))
lon = to_float(config_dict['Station'].get('longitude'))
total_intervals = 0
cnt=0

dbManager = db_binder.get_manager(data_binding='wx_binding', initialize=True)

sql = 'SELECT a.dateTime, a.interval, a.usUnits, a.radiation, a.sunshineDur \
       FROM archive a \
       WHERE a.radiation is not null and \
       a.dateTime >= %d and \
       a.datetime <= %d \
       ORDER BY a.dateTime ASC;' % (args.start_time, args.end_time)

print('Starting backfill from %s' % (timestamp_to_string(args.start_time)))
for row in dbManager.genSql(sql):
    cnt += 1
    time_stamp  = to_int(row[0])
    interval    = to_int(row[1]) * 60
    usUnits     = to_int(row[2])
    radiation   = to_float(row[3])
    sunshineDur = to_int(row[4])
    if sunshineDur is None:
        sunshineDur = 0

    if radiation is not None and radiation >= radiation_min:
        threshold = sunshineThreshold(time_stamp, lat, lon)
        if threshold > 0.0 and radiation > threshold:
            sql = 'UPDATE archive SET sunshineDur = %d WHERE dateTime = %d;' % (interval, time_stamp)
            dbManager.getSql(sql)

    if cnt % 1000 == 0:
        show_progress(time_stamp, cnt)

    total_intervals += (interval/60)

print("\nfinished. %d days updated; last dateTime: %s" % (total_intervals / 1440, timestamp_to_string(time_stamp)))
