#!/usr/bin/python3
# warnings of public dangers
# Copyright (C) 2022 Johanna Roedenbeck
# licensed under the terms of the General Public License (GPL) v3

from __future__ import absolute_import
from __future__ import print_function
from __future__ import with_statement

"""
    This script is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This script is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.
"""


# Source: https://nina.api.bund.dev


DEFAULT_BBK_URL = "https://warnung.bund.de/api31"

import time
import datetime
import json
import requests
import configobj

if __name__ == "__main__":
    import optparse
    import sys
    def loginf(x):
        print(x, file=sys.stderr)
    def logerr(x):
        print(x, file=sys.stderr)

"""
# not used here
# from dwd-cap-warnings
AGS_STATES = {
  '01':('SH','Schleswig-Holstein'),
  '02':('HH','Freie und Hansestadt Hamburg'),
  '03':('NS','Niedersachsen'),
  '04':('HB','Freie Hansestadt Bremen'),
  '05':('NRW','Nordrhein-Westfalen'),
  '06':('HE','Hessen'),
  '07':('RP','Rheinland-Pfalz'),
  '08':('BW','Baden-W체rttemberg'),
  '09':('BY','Freistaat Bayern'),
  '10':('SL','Saarland'),
  '11':('BB','Berlin'),
  '12':('BB','Brandenburg'),
  '13':('MV','Mecklenburg-Vorpommern'),
  '14':('SN','Freistaat Sachsen'),
  '15':('SA','Sachsen-Anhalt'),
  '16':('TH','Th체ringen')}
"""

WARNING_SOURCES = (
  'katwarn',
  'biwapp',
  'mowas',
  'dwd',
  'lhp',
  'police')
  
CAP_SEVERITY = {
  'Minor':2,
  'Moderate':3,
  'Severe':4,
  'Extreme':5}

bbk_level = (
  'keine Warnung',     # 0 no warning
  'Vorinformation',    # 1 preliminary info
  'leicht',            # 2 minor
  'mittel',            # 3 moderate
  'schwer',            # 4 severe
  'extrem')            # 5 extreme
dwd_level=(
  'keine Warnung',     # 0 no warning
  'Vorinformation',    # 1 preliminary info
  'Wetterwarnung',     # 2 minor
  'markantes Wetter',  # 3 moderate
  'Unwetterwarnung',   # 4 severe
  'extremes Unwetter') # 5 extreme

def bbk_level_text(level, isdwd=False):
    try:
        if isdwd: return dwd_level[level]
        return bbk_level[level]
    except IndexError:
        if level==10: return 'Hitzewarnung'
    return None

def get_eventtype(evt, ii):
    return "*"
    

def tobool(x):
    """ convert text to boolean
        Copyright (C) Tom Keffer
    """
    try:
        if x.lower() in ['true', 'yes', 'y']:
            return True
        elif x.lower() in ['false', 'no', 'n']:
            return False
    except AttributeError:
        pass
    try:
        return bool(int(x))
    except (ValueError, TypeError):
        pass
    raise ValueError("Unknown boolean specifier: '%s'." % x)


class BbkWarnings(object):

    def __init__(self, config_dict, verbose=False):

        base_dict = config_dict.get('forecast-pwsWeiherhammer',dict())
        # target path
        self.target_path = base_dict.get('path','.')
        # warning config data
        warn_dict = base_dict.get('BBK',dict())
        self.filter_area = warn_dict.get('counties',dict())
        self.icon_pth = warn_dict.get('icons','images')
        self.bbk_url = DEFAULT_BBK_URL
        # warn icons
        self.icon_pth = warn_dict.get('icons',self.bbk_url+'/appdata/gsb/eventCodes')
        self.logo_pth = warn_dict.get('logos',self.bbk_url+'/appdata/gsb/logos')
        # logging
        self.verbose = verbose
        self.log_success = tobool(warn_dict.get('log_success',base_dict.get('log_success',config_dict.get('log_success',False))))
        self.log_failure = tobool(warn_dict.get('log_failure',base_dict.get('log_failure',config_dict.get('log_failure',False))))
        if int(config_dict.get('debug',0))>0 or verbose:
            self.log_success = True
            self.log_failure = True
            self.verbose = True
        if __name__ == "__main__" and verbose:
            print('-- configuration data ----------------------------------')
            print('verbose:      ',self.verbose)
            print('log success:  ',self.log_success)
            print('log failure:  ',self.log_failure)
            print('url:          ',self.bbk_url)
            print('filter area:  ',self.filter_area)
            print('target path:  ',self.target_path)
            print('--------------------------------------------------------')


    @staticmethod
    def _mktime(timestring):
        """ convert CAP timestamp string to epoch time """
        if not timestring: return None
        ti = datetime.datetime.strptime(timestring,'%Y-%m-%dT%H:%M:%S%z')
        #print(ti)
        return int(ti.timestamp()*1000)
        

    @staticmethod
    def compareARS(ars, pars):
        """ Is ars in pars? """
        if not pars: return True
        # remove '0' at the end of the string
        ars_str = ars.strip().rstrip('0')
        ars_len = len(ars_str)
        #print('QQQQQQQQQQ','ARS str',ars_str,'len',ars_len)
        # '000000000000' means 'whole country'
        if ars_len==0: return True
        # pars may be a list of ARS
        for ii in pars.split(','):
            # remove '0' at the end of the string
            vgl_str = ii.strip().rstrip('0')
            vgl_len = len(vgl_str)
            #print('QQQQQQQQQQ','ARS',ars_str,ars_len,'VGL',vgl_str,vgl_len,':',ars[0:min(vgl_len,ars_len)],'==',vgl_str[0:min(vgl_len,ars_len)])
            # 
            if vgl_len==0: return True
            #
            if ars[0:min(vgl_len,ars_len)]==vgl_str[0:min(vgl_len,ars_len)]: 
                return True
        return False
    

    def wget(self, url):
        """ download from BBK """
        headers={'User-Agent':'weewx-DWD'}
        reply = requests.get(url,headers=headers)

        if reply.status_code==200:
            if self.log_success or self.verbose:
                loginf('successfully downloaded %s' % reply.url)
            return json.loads(reply.content)
        else:
            if self.log_failure or self.verbose:
                loginf('error downloading %s: %s %s' % (reply.url,reply.status_code,reply.reason))
            return None

    def get_logos(self):
        """ get the list of sender logos """
        url = self.bbk_url + '/appdata/gsb/logos/logos.json'
        logos = self.wget(url)
        return {logo['senderId']:logo for logo in logos['logos']}
    
    
    def get_eventcodes(self):
        """ get the list of event codes """
        url = self.bbk_url + '/appdata/gsb/eventCodes/eventCodes.json'
        evcs = self.wget(url)
        return {evc['eventCode']:evc['imageUrl'] for evc in evcs['eventCodes']}
    
    def get_list(self, ars):
        """ get list of active warnings for county ars """
        if ars in WARNING_SOURCES:
            url = self.bbk_url + '/' + ars + '/mapData.json'
        else:
            url = self.bbk_url + '/dashboard/' + str(ars)[0:5] + '0000000.json'
        return self.wget(url)


    def get_warning(self, id):
        """ get warning data of warning id """    
        url = self.bbk_url + '/warnings/' + id +'.json'
        return self.wget(url)
        
        
    def get_warnings(self, location=None, include_dwd=False, lang='de'):

        # initialize dict for all regions to collect warnings for
        if location:
            try:
                wwarn = {i:[] for i in location}
                arss = {i:i for i in location}
            except LookupError:
                wwarn = {location:[]}
                arss = {location:location}
        else:
            wwarn = {self.filter_area[i]:[] for i in self.filter_area}
            arss = self.filter_area
        
        evcode = self.get_eventcodes()
        logos = self.get_logos()
        
        # remember downloaded warnings
        alerts = dict()
        
        for ars in arss:
        
            if self.verbose and __name__ == "__main__":
                    print("++ dashboard data ++++++++++++++++++++++++++++++++++++++")
                
            warns = self.get_list(ars)
            
            if self.verbose:
                loginf("Regionalschl체ssel ARS %s, %s Eintr채ge" % (ars,len(warns)))
                
            if warns:
        
                for warn in warns:
                    
                    if self.verbose:
                        loginf("Warn ID: %s" % warn.get('id'))
                        loginf(warn)
                    
                    if warn['id'] in alerts:
                        # this warning is already downloaded
                        alert = alerts[warn['id']]
                        if self.log_success or self.verbose:
                            loginf('reuse warning %s' % warn['id'])
                    else:
                        # download warning
                        alert = self.get_warning(warn['id'])
                        alerts[warn['id']] = alert
                    
                    if 'sender' in alert:
                        logo = logos.get(alert['sender'])
                        if logo:
                            if 'image' in logo:
                                alert['sender_logo'] = self.logo_pth+'/'+logo.get('image')
                            alert['sender_name'] = logo.get('name')
                    for info_dict in alert.get('info',[]):
                        if info_dict.get('language','')[0:2].lower()==lang:
                            for jj in info_dict.get('area',dict()):
                                alert['areas'] = jj.get('areaDesc')
                            alert['event'] = info_dict['event']
                            alert['headline'] = info_dict['headline']
                            alert['description'] = info_dict['description']
                            alert['urgency'] = info_dict['urgency']
                            alert['severity'] = info_dict['severity']
                            alert['category'] = info_dict['category']
                            alert['certainty'] = info_dict['certainty']
                            # <eventCode>
                            for ii in info_dict.get('eventcode',[]):
                                vn = None
                                vl = None
                                for jj in ii:
                                    if jj.lower()=='valuename':
                                        vn = ii[jj]
                                    elif jj.lower()=='value':
                                        vl = ii[jj]
                                if vn and vl is not None:
                                    alert['eventCode-'+str(vn)] = vl
                            # <parameter>
                            alert['parameter'] = dict()
                            for ii in info_dict.get('parameter',[]):
                                vn = None
                                vl = None
                                for jj in ii:
                                    if jj.lower()=='valuename':
                                        vn = ii[jj]
                                    elif jj.lower()=='value':
                                        vl = ii[jj]
                                try:
                                    alert['parameter'][vn] = vl
                                except LookupError:
                                    pass
                            # severity level
                            if info_dict.get('event','')[:16]=='VORABINFORMATION':
                                alert['level'] = 1
                            else:
                                alert['level'] = CAP_SEVERITY.get(info_dict.get('severity'),0)
                            alert["level_text"] = bbk_level_text(alert['level'],alert.get('sender','')=="opendata@dwd.de")
                            # event type
                            alert['type'] = get_eventtype(
                                      info_dict.get('event'),
                                      alert.get('eventCode-II'))
                            del alert['info']
                    # release time
                    alert['released'] = BbkWarnings._mktime(warn.get('effective',warn.get('sent')))
                    # start time
                    alert['start'] = BbkWarnings._mktime(warn.get('onset',warn.get('sent')))
                    # end time
                    alert['end'] = BbkWarnings._mktime(warn.get('expires'))
                    # <code>
                    for ii in alert.get('code',[]):
                        if ii=='SILENT_UPDATE':
                            alert['SILENT_UPDATE'] = True
                        if ii=='PARTIAL_CLEAR':
                            alert['PARTIAL_CLEAR'] = True
                        if ii[:3]=='id:':
                            alert['msgid'] = ii
                    # warn icon
                    evc = warn.get('payload',dict()).get('data',dict()).get('transKeys',dict()).get('event')
                    if evc:
                        alert['icon'] = self.icon_pth+'/'+evcode.get(evc,'unknown.png')
                    else:
                        alert['icon'] = self.icon_pth+'/'+'bbkicon.png'
                    # "opendata@dwd.de"
                    if alert.get('sender','')!="opendata@dwd.de" or include_dwd:
                        pars = alert.get('parameter',dict()).get('warnVerwaltungsbereiche','')
                        if BbkWarnings.compareARS(ars,pars):
                            wwarn[arss[ars]].append(alert)
                
                    if self.verbose and __name__ == "__main__":
                        print("--")
        return wwarn


    def write_html(self, wwarn, dryrun):
        for __ww in wwarn:
            s = ""
            r = None
            for idx,val in enumerate(wwarn[__ww]):
                _region = val['areas']
                val['regionName'] = _region
                if r is None or r!=_region:
                    r = _region
                    s+='<p style="margin-top:5px"><strong>%s</strong></p>\n' % r
                
                # alert message 
                s+='<table style="vertical-align:middle"><tr style="vertical-align:middle">\n'
                if val.get('icon'):
                    s+='<td style="width:60px"><img src="%s" alt="%s"/></td>\n' % (val['icon'],val['event'])
                __size=110 if int(val['level'])>2 else 100
                s+='<td><p style="font-size:%i%%;margin-bottom:0">%s</p>\n' % (__size,val['headline'])
                if val['start'] and val['end']:
                    s='%s<p style="font-size:80%%">g체ltig vom %s bis %s</p></td>\n' % (s,time.strftime("%d.%m. %H:%M",time.localtime(val['start']/1000)),time.strftime("%d.%m. %H:%M",time.localtime(val['end']/1000)))
                elif val['start']:
                    s='%s<p style="font-size:80%%">g체ltig seit %s</p></td>\n' % (s,time.strftime("%d.%m. %H:%M",time.localtime(val['start']/1000)))
                elif val['end']:
                    s='%s<p style="font-size:80%%">g체ltig bis %s</p></td>\n' % (s,time.strftime("%d.%m. %H:%M",time.localtime(val['end']/1000)))
                s+='</tr></table>\n'

                if val.get('description'):
                    s+="<p>%s</p>\n" % val['description']
                if val.get('instruction'):
                    s+="<p>%s</p>\n" % val['instruction']
                if val.get('sender'):
                    if 'sender_name' in val:
                        sn = val['sender_name']+' ('+val['sender']+')'
                    else:
                        sn = val['sender']
                    if val.get('sender_logo',''):
                        lg = '<img src="%s" style="max-height:16px" alt="%s" /> ' % (val['sender_logo'],val['sender'])
                    else:
                        lg = ""
                    s+='<p style="font-size:80%%">Quelle: %s%s</p>' % (lg,sn)

                s+='<p style="font-size:40%%">%s &ndash; %s &emsp;&ndash;&emsp;  %s &ndash; %s &emsp;&ndash;&emsp; %s &ndash; </p>' % (val.get('type',''),val.get('event',''),val.get('level',''),val.get('level_text',''),val.get('identifier',''))
                
            if not s:
                s='<p>zur Zeit keine Warnungen</p>'
 
            if dryrun:
                print("########################################")
                print("-- HTML -- bbk-%s.inc ------------------------------"%__ww)
                print(s)
                print("-- JSON -- bbk-%s.json -----------------------------"%__ww)
                print(json.dumps(wwarn[__ww],indent=4,ensure_ascii=False))
            else:
                with open("%s/bbk-%s.inc" % (self.target_path,__ww),"w") as file:
                    file.write(s)
                with open("%s/bbk-%s.json" % (self.target_path,__ww),"w") as file:
                    json.dump(wwarn[__ww],file,indent=4)

if __name__ == "__main__":

    usage = """Usage: %prog [options] [ARS]

  If no ARS is specified, ARSs are read from config.
    """
    
    epilog = None
    
    # Create a command line parser:
    parser = optparse.OptionParser(usage=usage, epilog=epilog)

    # options
    parser.add_option("--config", dest="config_path", type=str,
                      metavar="CONFIG_FILE",
                      default=None,
                      help="Use configuration file CONFIG_FILE.")
    parser.add_option("--weewx", action="store_true",
                      help="Read config from weewx.conf.")
    parser.add_option("--lang", dest="lang", type=str,
                      metavar="ISO639",
                      default='de',
                      help="Alert language. Default 'de'")

    group = optparse.OptionGroup(parser,"Output and logging options")
    group.add_option("--dry-run", action="store_true",
                      default=False,
                      help="Print what would happen but do not do it. Default is False")
    group.add_option("-v","--verbose", action="store_true",
                      default=False,
                      help="Verbose output")
    group.add_option("--include-dwd", action="store_true",
                      default=False,
                      help="include DWD warnings. Default is False. Use dwd-cap-warnings to get DWD warnings.")
    parser.add_option_group(group)
    
    # commands
    group = optparse.OptionGroup(parser,"Commands")
    group.add_option("--list-logos", action="store_true",
                      help="list logos")
    group.add_option("--list-eventcodes", action="store_true",
                      help="list event codes")
    parser.add_option_group(group)

    (options, args) = parser.parse_args()

    if options.weewx:
        config_path = "/etc/weewx/weewx.conf"
    else:
        config_path = options.config_path

    if config_path:
        print("Using configuration file %s" % config_path)
        config = configobj.ConfigObj(config_path)
    else:
        # test only
        print("Using test configuration")
        # vom Benutzer anzupassen
        config = {'DeutscherWetterdienst':{'BBK':{'counties':{'146280000000':'XX'}}}}
        config = {'DeutscherWetterdienst':{'BBK':{'counties':{'083110000000':'XX'}}}}

    if len(args)==0: args = None
    
    bbk = BbkWarnings(config,verbose=options.verbose)
    """
    warns = bbk.get_list('146280000000')
    for warn in warns:
        print(warn['id'])
        print(bbk.get_warning(warn['id']))
        break
    """
    if options.list_logos:
        x = bbk.get_logos()
        print(json.dumps(x,indent=4,ensure_ascii=False))
    elif options.list_eventcodes:
        x = bbk.get_eventcodes()
        print(json.dumps(x,indent=4,ensure_ascii=False))
    else:
        wwarn = bbk.get_warnings(location=args,include_dwd=options.include_dwd,lang=options.lang)
        bbk.write_html(wwarn,options.dry_run)